"""add User model, link User with Contact

Revision ID: c35d1ccf6860
Revises: a4d43badfc33
Create Date: 2025-06-09 22:16:01.700746

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "c35d1ccf6860"
down_revision: Union[str, None] = "a4d43badfc33"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# SQL for the onupdate trigger function (PostgreSQL specific)
TRIGGER_FUNC = """
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';
"""

# Name of the trigger we will create
UPDATE_TRIGGER = "trigger_users_updated_at"


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("username", sa.String(length=50), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("hashed_password", sa.String(length=255), nullable=False),
        sa.Column("avatar_url", sa.String(length=255), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)

    # --- Manually add trigger for onupdate behavior ---
    op.execute(TRIGGER_FUNC)
    op.execute(
        f"""
        CREATE TRIGGER {UPDATE_TRIGGER}
        BEFORE UPDATE ON users
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
    """
    )
    # --- End of manual trigger addition ---

    op.add_column("contacts", sa.Column("user_id", sa.Integer(), nullable=False))
    op.alter_column("contacts", "email", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_constraint("contacts_email_key", "contacts", type_="unique")
    op.create_unique_constraint(
        "unique_contact_user_email", "contacts", ["user_id", "email"]
    )
    op.create_foreign_key(None, "contacts", "users", ["user_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "contacts", type_="foreignkey")
    op.drop_constraint("unique_contact_user_email", "contacts", type_="unique")
    op.create_unique_constraint("contacts_email_key", "contacts", ["email"])
    op.alter_column("contacts", "email", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_column("contacts", "user_id")

    # --- Manually drop trigger ---
    op.execute(f"DROP TRIGGER IF EXISTS {UPDATE_TRIGGER} ON users;")
    op.execute("DROP FUNCTION IF EXISTS update_updated_at_column();")
    # --- End of manual trigger drop ---

    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
